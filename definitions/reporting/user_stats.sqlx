config {
  type: "table",
  schema: "reporting",
  tags: ["daily"],
  description: "Creates a summary table for all users including statistics on questions, answeers and badges received.",
  columns: {
    user_id: "",
    age: "",
    creation_date: "",
    user_tenure: "",
    badge_count:  "",
    questions_and_answer_count: "",
    question_count: "",
    answer_count:  "",
    last_badge_received_at:  "",
    last_posted_at: "",
    last_question_posted_at:  "",
    last_answer_posted_at: ""
  },
  assertions: {
    uniqueKey: ["user_id"],
    rowConditions: ["badge_count >= 0"]
  }
}

SELECT
  stage_users.user_id,
  stage_users.age,
  stage_users.creation_date,
  stage_users.user_tenure,
  count(distinct stage_badges.badge_id) as badge_count,
  count(distinct posts_all.post_id) as questions_and_answer_count,
  count(distinct if(type="question", posts_all.post_id, null)) as question_count,
  count(distinct if(type="answer", posts_all.post_id, null)) as answer_count,
  max(stage_badges.award_timestamp) as last_badge_received_at,
  max(posts_all.created_at) as last_posted_at,
  max(if(type="question", posts_all.created_at, null)) as last_question_posted_at,
  max(if(type="answer", posts_all.created_at, null)) as last_answer_posted_at
FROM
  ${ref("stage_users")} as stage_users
  left join ${ref("stage_badges")} as stage_badges
    on stage_users.user_id = stage_badges.user_id
  left join ${ref("posts_combined")} as posts_all
    on stage_users.user_id = posts_all.owner_user_id
GROUP BY
  1,2,3,4